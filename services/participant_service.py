from typing import Dict, List, Optional, Union
from dataclasses import asdict
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from repositories.participant_repository import AbstractParticipantRepository
from models.participant import Participant
from database import find_participant_by_name
from utils.validators import validate_participant_data
from utils.exceptions import (
    DuplicateParticipantError,
    ParticipantNotFoundError,
    ValidationError,
)

logger = logging.getLogger(__name__)

FIELD_LABELS = {
    "FullNameRU": "–ò–º—è (—Ä—É—Å)",
    "FullNameEN": "–ò–º—è (–∞–Ω–≥–ª)",
    "Gender": "–ü–æ–ª",
    "Size": "–†–∞–∑–º–µ—Ä",
    "Church": "–¶–µ—Ä–∫–æ–≤—å",
    "Role": "–†–æ–ª—å",
    "Department": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç",
    "CountryAndCity": "–ì–æ—Ä–æ–¥",
    "SubmittedBy": "–ö—Ç–æ –ø–æ–¥–∞–ª",
    "ContactInformation": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
}

FIELD_EMOJIS = {
    "FullNameRU": "üë§",
    "FullNameEN": "üåç",
    "Gender": "‚ö•",
    "Size": "üëï",
    "Church": "‚õ™",
    "Role": "üë•",
    "Department": "üè¢",
    "CountryAndCity": "üèôÔ∏è",
    "SubmittedBy": "üë®‚Äçüíº",
    "ContactInformation": "üìû",
}


def merge_participant_data(
    existing_data: Union[Participant, Dict], updates: Dict
) -> Dict:
    """Merge existing participant data with new values."""
    if isinstance(existing_data, Participant):
        merged = asdict(existing_data)
    else:
        merged = existing_data.copy()
    for key, value in updates.items():
        if value is not None and value != "":
            merged[key] = value
    return merged


def format_participant_block(data: Dict) -> str:
    text = (
        f"–ò–º—è (—Ä—É—Å): {data.get('FullNameRU') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–º—è (–∞–Ω–≥–ª): {data.get('FullNameEN') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ª: {data.get('Gender')}\n"
        f"–†–∞–∑–º–µ—Ä: {data.get('Size') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–¶–µ—Ä–∫–æ–≤—å: {data.get('Church') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–†–æ–ª—å: {data.get('Role')}"
    )
    if data.get("Role") == "TEAM":
        text += f"\n–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {data.get('Department') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    text += (
        f"\n–ì–æ—Ä–æ–¥: {data.get('CountryAndCity') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ö—Ç–æ –ø–æ–¥–∞–ª: {data.get('SubmittedBy') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('ContactInformation') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )
    return text


def get_edit_keyboard(participant_data: Dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π."""
    buttons = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")],
        [
            InlineKeyboardButton("üë§ –ò–º—è (—Ä—É—Å)", callback_data="edit_FullNameRU"),
            InlineKeyboardButton("üåç –ò–º—è (–∞–Ω–≥–ª)", callback_data="edit_FullNameEN"),
        ],
        [
            InlineKeyboardButton("‚ö• –ü–æ–ª", callback_data="edit_Gender"),
            InlineKeyboardButton("üëï –†–∞–∑–º–µ—Ä", callback_data="edit_Size"),
        ],
        [
            InlineKeyboardButton("‚õ™ –¶–µ—Ä–∫–æ–≤—å", callback_data="edit_Church"),
            InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥", callback_data="edit_CountryAndCity"),
        ],
        [
            InlineKeyboardButton("üë• –†–æ–ª—å", callback_data="edit_Role"),
            InlineKeyboardButton("üè¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", callback_data="edit_Department"),
        ],
        [
            InlineKeyboardButton("üë®‚Äçüíº –ö—Ç–æ –ø–æ–¥–∞–ª", callback_data="edit_SubmittedBy"),
            InlineKeyboardButton(
                "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="edit_ContactInformation"
            ),
        ],
    ]
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_cancel")])
    return InlineKeyboardMarkup(buttons)


def detect_changes(old: Dict, new: Dict) -> List[str]:
    """Return human readable list of changes."""
    changes = []
    for field, new_value in new.items():
        old_value = old.get(field, "")
        if new_value != old_value:
            label = FIELD_LABELS.get(field, field)
            emoji = FIELD_EMOJIS.get(field, "")
            changes.append(f"{emoji} **{label}:** {old_value or '‚Äî'} ‚Üí {new_value}")
    return changes


def check_duplicate(full_name_ru: str) -> Optional[Dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None."""
    try:
        return find_participant_by_name(full_name_ru)
    except ParticipantNotFoundError:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return None


class ParticipantService:
    """
    ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô Service layer –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º Repository pattern.

    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. Service —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–æ–º–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ Participant
    2. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π) –æ—Å—Ç–∞–µ—Ç—Å—è –≤ Service
    3. Repository –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –ø–æ–ª–Ω–æ–≥–æ, —Ç–∞–∫ –∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """

    def __init__(self, repository: AbstractParticipantRepository):
        self.repository = repository

    def check_duplicate(self, full_name_ru: str) -> Optional[Participant]:
        """Return participant if exists, otherwise None."""
        return self.repository.get_by_name(full_name_ru)

    def add_participant(self, data: Dict) -> int:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Participant –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ repository.

        Validate data, check for duplicates and save participant.
        """
        valid, error = validate_participant_data(data)
        if not valid:
            raise ValidationError(error)

        existing = self.check_duplicate(data.get("FullNameRU", ""))
        if existing:
            raise DuplicateParticipantError(
                f"Participant '{data.get('FullNameRU')}' already exists"
            )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Participant –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ repository
        new_participant = Participant(**data)
        return self.repository.add(new_participant)

    def update_participant(self, participant_id: int, data: Dict) -> bool:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç Participant.

        Validate and update participant completely.
        """
        valid, error = validate_participant_data(data)
        if not valid:
            raise ValidationError(error)

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        existing = self.repository.get_by_id(participant_id)
        if existing is None:
            raise ParticipantNotFoundError(
                f"Participant with id {participant_id} not found"
            )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updated_data = data.copy()
        updated_data["id"] = participant_id

        updated_participant = Participant(**updated_data)
        return self.repository.update(updated_participant)

    def update_participant_fields(self, participant_id: int, **fields) -> bool:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π.

        Args:
            participant_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
            **fields: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        Example:
            service.update_participant_fields(123, FullNameRU="–ù–æ–≤–æ–µ –∏–º—è", Gender="M")
        """

        if fields:
            temp_data = {
                "FullNameRU": "temp",
                "Gender": "F",
                "Church": "temp",
                "Role": "CANDIDATE",
                **fields,
            }

            valid, error = validate_participant_data(temp_data)
            if not valid:
                field_names = set(fields.keys())
                critical_fields = {"FullNameRU", "Gender", "Church", "Role"}
                if field_names & critical_fields:
                    raise ValidationError(error)

        return self.repository.update_fields(participant_id, **fields)

    def get_participant(self, participant_id: int) -> Optional[Participant]:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID.
        """

        return self.repository.get_by_id(participant_id)

    def get_all_participants(self) -> List[Participant]:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        """

        return self.repository.get_all()

    def delete_participant(self, participant_id: int) -> bool:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        """

        return self.repository.delete(participant_id)

    def participant_exists(self, participant_id: int) -> bool:
        """
        ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        """

        return self.repository.exists(participant_id)
