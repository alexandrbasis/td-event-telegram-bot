"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã (Payment Functionality)
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ TDB-1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
"""

import unittest
import sqlite3
from datetime import datetime
from models.participant import Participant
from constants import PaymentStatus, PAYMENT_STATUS_DISPLAY, payment_status_from_display
from services.participant_service import ParticipantService, format_participant_block
from parsers.participant_parser import ParticipantParser, parse_unstructured_text
from repositories.participant_repository import SqliteParticipantRepository
import database


class TestPaymentModel(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Participant —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã"""
    
    def test_participant_payment_fields_default_values(self):
        """–¢–µ—Å—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã"""
        participant = Participant(FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫", Role="CANDIDATE")
        
        self.assertEqual(participant.PaymentStatus, "Unpaid")
        self.assertEqual(participant.PaymentAmount, 0)
        self.assertEqual(participant.PaymentDate, "")
    
    def test_participant_payment_fields_custom_values(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã"""
        participant = Participant(
            FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫",
            Role="CANDIDATE",
            PaymentStatus="Paid",
            PaymentAmount=500,
            PaymentDate="2025-01-24"
        )
        
        self.assertEqual(participant.PaymentStatus, "Paid")
        self.assertEqual(participant.PaymentAmount, 500)
        self.assertEqual(participant.PaymentDate, "2025-01-24")
    
    def test_payment_amount_integer_only(self):
        """–¢–µ—Å—Ç —á—Ç–æ PaymentAmount –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ integers"""
        participant = Participant(FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫", Role="CANDIDATE")
        
        # –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å integers
        participant.PaymentAmount = 1500
        self.assertEqual(participant.PaymentAmount, 1500)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ int
        self.assertIsInstance(participant.PaymentAmount, int)


class TestPaymentStatusEnum(unittest.TestCase):
    """–¢–µ—Å—Ç—ã enum PaymentStatus"""
    
    def test_payment_status_values(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π enum PaymentStatus"""
        self.assertEqual(PaymentStatus.UNPAID.value, "Unpaid")
        self.assertEqual(PaymentStatus.PAID.value, "Paid")
        self.assertEqual(PaymentStatus.PARTIAL.value, "Partial")
        self.assertEqual(PaymentStatus.REFUNDED.value, "Refunded")
    
    def test_payment_status_display_mapping(self):
        """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        expected_display = {
            "Unpaid": "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
            "Paid": "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
            "Partial": "üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ",
            "Refunded": "üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        }
        
        self.assertEqual(PAYMENT_STATUS_DISPLAY, expected_display)
    
    def test_payment_status_from_display_function(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ payment_status_from_display"""
        # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.assertEqual(payment_status_from_display("–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ"), "Unpaid")
        self.assertEqual(payment_status_from_display("–æ–ø–ª–∞—á–µ–Ω–æ"), "Paid")
        self.assertEqual(payment_status_from_display("—á–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ"), "Partial")
        self.assertEqual(payment_status_from_display("–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ"), "Refunded")
        
        # –¢–µ—Å—Ç case insensitive
        self.assertEqual(payment_status_from_display("–ù–ï –û–ü–õ–ê–ß–ï–ù–û"), "Unpaid")
        self.assertEqual(payment_status_from_display("–û–ø–ª–∞—á–µ–Ω–æ"), "Paid")
        
        # –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        self.assertEqual(payment_status_from_display("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"), "Unpaid")


class TestPaymentValidation(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã"""
    
    def test_validate_payment_amount_valid_integers(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
        valid_amounts = ["100", "500", "1000", "1", "999999"]
        
        for amount_str in valid_amounts:
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
            try:
                amount = int(amount_str.strip())
                self.assertGreater(amount, 0)
                self.assertIsInstance(amount, int)
            except ValueError:
                self.fail(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {amount_str}")
    
    def test_validate_payment_amount_invalid_values(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        invalid_amounts = ["100.5", "abc", "", "0", "-100", "100.0", "10,5"]
        
        for amount_str in invalid_amounts:
            with self.assertRaises(ValueError):
                amount = int(amount_str.strip())
                if amount <= 0:
                    raise ValueError("Amount must be positive")
    
    def test_payment_status_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        valid_statuses = ["Unpaid", "Paid", "Partial", "Refunded"]
        
        for status in valid_statuses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ enum
            self.assertTrue(any(ps.value == status for ps in PaymentStatus))


class TestPaymentParser(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.parser = ParticipantParser()
    
    def test_parse_payment_status_from_text(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        test_cases = [
            ("–ò–º—è: –¢–µ—Å—Ç\n–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—á–µ–Ω–æ", "Paid"),
            ("–ò–º—è: –¢–µ—Å—Ç\n–û–ø–ª–∞—Ç–∞: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", "Unpaid"),
        ]
        
        for text, expected_status in test_cases:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
            result = parse_unstructured_text(text)
            if result.get("PaymentStatus"):
                self.assertEqual(result.get("PaymentStatus"), expected_status)
    
    def test_parse_payment_amount_from_text(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        test_cases = [
            ("–ò–º—è: –¢–µ—Å—Ç\n–°—É–º–º–∞: 500", 500),
            ("–ò–º—è: –¢–µ—Å—Ç\n–û–ø–ª–∞—á–µ–Ω–æ: 1200", 1200),
        ]
        
        for text, expected_amount in test_cases:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
            result = parse_unstructured_text(text)
            if result.get("PaymentAmount"):
                self.assertEqual(result.get("PaymentAmount"), expected_amount)


class TestPaymentService(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –ë–î –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
        database.DB_PATH = ":memory:"
        self.conn = sqlite3.connect(database.DB_PATH)
        self.conn.row_factory = sqlite3.Row
        
        # –ü–∞—Ç—á–∏–º DatabaseConnection –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self._original_enter = database.DatabaseConnection.__enter__
        self._original_exit = database.DatabaseConnection.__exit__
        
        def _enter(_self):
            _self.conn = self.conn
            return self.conn
        
        def _exit(_self, exc_type, exc_val, exc_tb):
            if exc_type:
                self.conn.rollback()
            else:
                self.conn.commit()
                
        database.DatabaseConnection.__enter__ = _enter
        database.DatabaseConnection.__exit__ = _exit
        
        database.init_database()
        self.repository = SqliteParticipantRepository()
        self.service = ParticipantService(self.repository)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        database.DatabaseConnection.__enter__ = self._original_enter
        database.DatabaseConnection.__exit__ = self._original_exit
        self.conn.close()
    
    def test_process_payment_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant(
            FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫",
            Role="CANDIDATE",
            PaymentStatus="Unpaid",
            PaymentAmount=0
        )
        participant_id = self.repository.add_participant(participant)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç amount, payment_date, user_id)
        success = self.service.process_payment(participant_id, 500, "2025-01-25")
        
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        updated_participant = self.repository.get_participant_by_id(participant_id)
        self.assertEqual(updated_participant.PaymentStatus, "Paid")
        self.assertEqual(updated_participant.PaymentAmount, 500)
        self.assertNotEqual(updated_participant.PaymentDate, "")  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞
    
    def test_validate_payment_data_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"""
        valid_data = {
            "PaymentAmount": 500,
            "PaymentStatus": "Paid"
        }
        
        is_valid, error_message = self.service.validate_payment_data(valid_data)
        
        self.assertTrue(is_valid)
        self.assertEqual(error_message, "")
    
    def test_get_payment_statistics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        participants_data = [
            ("–£—á–∞—Å—Ç–Ω–∏–∫ 1", "Paid", 500),
            ("–£—á–∞—Å—Ç–Ω–∏–∫ 2", "Unpaid", 0),
            ("–£—á–∞—Å—Ç–Ω–∏–∫ 3", "Paid", 800),
        ]
        
        for name, status, amount in participants_data:
            participant = Participant(
                FullNameRU=name,
                Role="CANDIDATE",
                PaymentStatus=status,
                PaymentAmount=amount
            )
            self.repository.add_participant(participant)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        stats = self.service.get_payment_statistics()
        
        self.assertIn("total_participants", stats)
        self.assertIn("paid_count", stats)
        self.assertIn("unpaid_count", stats)
        self.assertIn("total_amount", stats)
    
    def test_format_participant_with_payment_info(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ"""
        participant = Participant(
            FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫",
            Role="CANDIDATE",
            PaymentStatus="Paid",
            PaymentAmount=500,
            PaymentDate="2025-01-24"
        )
        
        formatted = format_participant_block(participant)
        
        self.assertIn("üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", formatted)
        self.assertIn("üí≥ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: 500 ‚Ç™", formatted)
        self.assertIn("üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: 2025-01-24", formatted)


class TestPaymentDatabase(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –ë–î –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
        database.DB_PATH = ":memory:"
        self.conn = sqlite3.connect(database.DB_PATH)
        self.conn.row_factory = sqlite3.Row
        
        # –ü–∞—Ç—á–∏–º DatabaseConnection –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self._original_enter = database.DatabaseConnection.__enter__
        self._original_exit = database.DatabaseConnection.__exit__
        
        def _enter(_self):
            _self.conn = self.conn
            return self.conn
        
        def _exit(_self, exc_type, exc_val, exc_tb):
            if exc_type:
                self.conn.rollback()
            else:
                self.conn.commit()
                
        database.DatabaseConnection.__enter__ = _enter
        database.DatabaseConnection.__exit__ = _exit
        
        database.init_database()
        self.repository = SqliteParticipantRepository()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        database.DatabaseConnection.__enter__ = self._original_enter
        database.DatabaseConnection.__exit__ = self._original_exit
        self.conn.close()
    
    def test_add_participant_with_payment_fields(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã"""
        participant = Participant(
            FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫",
            Role="CANDIDATE",
            PaymentStatus="Paid",
            PaymentAmount=500,
            PaymentDate="2025-01-24"
        )
        
        participant_id = self.repository.add_participant(participant)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è —Å –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã
        saved_participant = self.repository.get_participant_by_id(participant_id)
        self.assertEqual(saved_participant.PaymentStatus, "Paid")
        self.assertEqual(saved_participant.PaymentAmount, 500)
        self.assertEqual(saved_participant.PaymentDate, "2025-01-24")
    
    def test_update_payment_info(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ"""
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant(FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫", Role="CANDIDATE")
        participant_id = self.repository.add_participant(participant)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
        update_data = {
            "PaymentStatus": "Paid",
            "PaymentAmount": 750,
            "PaymentDate": "2025-01-24"
        }
        
        success = self.repository.update_participant(participant_id, update_data)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_participant = self.repository.get_participant_by_id(participant_id)
        self.assertEqual(updated_participant.PaymentStatus, "Paid")
        self.assertEqual(updated_participant.PaymentAmount, 750)
        self.assertEqual(updated_participant.PaymentDate, "2025-01-24")


class TestPaymentIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –ë–î –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
        database.DB_PATH = ":memory:"
        self.conn = sqlite3.connect(database.DB_PATH)
        self.conn.row_factory = sqlite3.Row
        
        # –ü–∞—Ç—á–∏–º DatabaseConnection –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self._original_enter = database.DatabaseConnection.__enter__
        self._original_exit = database.DatabaseConnection.__exit__
        
        def _enter(_self):
            _self.conn = self.conn
            return self.conn
        
        def _exit(_self, exc_type, exc_val, exc_tb):
            if exc_type:
                self.conn.rollback()
            else:
                self.conn.commit()
                
        database.DatabaseConnection.__enter__ = _enter
        database.DatabaseConnection.__exit__ = _exit
        
        database.init_database()
        self.repository = SqliteParticipantRepository()
        self.service = ParticipantService(self.repository)
        self.parser = ParticipantParser()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        database.DatabaseConnection.__enter__ = self._original_enter
        database.DatabaseConnection.__exit__ = self._original_exit
        self.conn.close()
    
    def test_full_payment_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        # 1. –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant(FullNameRU="–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∞—Å—Ç–Ω–∏–∫", Role="CANDIDATE")
        participant_id = self.repository.add_participant(participant)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
        initial_participant = self.repository.get_participant_by_id(participant_id)
        self.assertEqual(initial_participant.PaymentStatus, "Unpaid")
        self.assertEqual(initial_participant.PaymentAmount, 0)
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        payment_success = self.service.process_payment(participant_id, 600, "2025-01-25")
        self.assertTrue(payment_success)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final_participant = self.repository.get_participant_by_id(participant_id)
        self.assertEqual(final_participant.PaymentStatus, "Paid")
        self.assertEqual(final_participant.PaymentAmount, 600)
        self.assertNotEqual(final_participant.PaymentDate, "")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = format_participant_block(final_participant)
        self.assertIn("üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", formatted)
        self.assertIn("üí≥ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: 600 ‚Ç™", formatted)


if __name__ == "__main__":
    unittest.main()
