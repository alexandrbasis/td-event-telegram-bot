import logging
import re
from typing import List, Dict, Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN, BOT_USERNAME, COORDINATOR_IDS, VIEWER_IDS
from database import (
    init_database,
    add_participant,
    get_all_participants,
    get_participant_by_id,
    find_participant_by_name,
    update_participant,
    update_participant_field,
)
from parsers.participant_parser import parse_participant_data
from utils.validators import validate_participant_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
FIELD_LABELS = {
    'FullNameRU': '–ò–º—è (—Ä—É—Å)',
    'FullNameEN': '–ò–º—è (–∞–Ω–≥–ª)',
    'Gender': '–ü–æ–ª',
    'Size': '–†–∞–∑–º–µ—Ä',
    'Church': '–¶–µ—Ä–∫–æ–≤—å',
    'Role': '–†–æ–ª—å',
    'Department': '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
    'CountryAndCity': '–ì–æ—Ä–æ–¥',
    'SubmittedBy': '–ö—Ç–æ –ø–æ–¥–∞–ª',
    'ContactInformation': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
}

FIELD_EMOJIS = {
    'FullNameRU': 'üë§',
    'FullNameEN': 'üåç',
    'Gender': '‚ö•',
    'Size': 'üëï',
    'Church': '‚õ™',
    'Role': 'üë•',
    'Department': 'üè¢',
    'CountryAndCity': 'üèôÔ∏è',
    'SubmittedBy': 'üë®‚Äçüíº',
    'ContactInformation': 'üìû',
}


def merge_participant_data(existing_data: Dict, updates: Dict) -> Dict:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    merged = existing_data.copy()
    for key, value in updates.items():
        if value:
            merged[key] = value
    return merged


def parse_confirmation_template(text: str) -> Dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    import re

    FIELD_MAPPING = {
        '–ò–º—è (—Ä—É—Å)': 'FullNameRU',
        '–ò–º—è (–∞–Ω–≥–ª)': 'FullNameEN',
        '–ü–æ–ª': 'Gender',
        '–†–∞–∑–º–µ—Ä': 'Size',
        '–¶–µ—Ä–∫–æ–≤—å': 'Church',
        '–†–æ–ª—å': 'Role',
        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': 'Department',
        '–ì–æ—Ä–æ–¥': 'CountryAndCity',
        '–ö—Ç–æ –ø–æ–¥–∞–ª': 'SubmittedBy',
        '–ö–æ–Ω—Ç–∞–∫—Ç—ã': 'ContactInformation',
    }

    prefix_re = re.compile(r'^[üåçüë§‚ö•üëï‚õ™üë•üè¢üèôÔ∏èüë®‚Äçüíºüìû\*\s]+(.+)$')
    kv_re = re.compile(r'^(?P<key>.+?):\s*(?P<value>.+)$')

    data: Dict = {}
    for raw_line in text.splitlines():
        line = raw_line.strip()
        if not line:
            continue

        line = line.replace('**', '')

        m_pref = prefix_re.match(line)
        if m_pref:
            line = m_pref.group(1).strip()

        m_kv = kv_re.match(line)
        if not m_kv:
            continue

        key = m_kv.group('key').strip()
        value = m_kv.group('value').strip()

        if re.search(r'[‚ùå‚ûñ]|–ù–µ —É–∫–∞–∑–∞–Ω–æ', value):
            value = ''

        field = FIELD_MAPPING.get(key)
        if field:
            data[field] = value

    return data


def format_participant_block(data: Dict) -> str:
    text = (
        f"üë§ **–ò–º—è (—Ä—É—Å):** {data.get('FullNameRU') or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üåç **–ò–º—è (–∞–Ω–≥–ª):** {data.get('FullNameEN') or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚ö• **–ü–æ–ª:** {data.get('Gender')}\n"
        f"üëï **–†–∞–∑–º–µ—Ä:** {data.get('Size') or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚õ™ **–¶–µ—Ä–∫–æ–≤—å:** {data.get('Church') or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë• **–†–æ–ª—å:** {data.get('Role')}"
    )
    if data.get('Role') == 'TEAM':
        text += f"\nüè¢ **–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:** {data.get('Department') or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è TEAM)'}"
    text += (
        f"\nüèôÔ∏è **–ì–æ—Ä–æ–¥:** {data.get('CountryAndCity') or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë®‚Äçüíº **–ö—Ç–æ –ø–æ–¥–∞–ª:** {data.get('SubmittedBy') or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {data.get('ContactInformation') or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )
    return text

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_role(user_id):
    if user_id in COORDINATOR_IDS:
        return "coordinator"
    elif user_id in VIEWER_IDS:
        return "viewer"
    else:
        return "unauthorized"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role == "unauthorized":
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return
    
    welcome_text = f"""
üèïÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Tres Dias Israel!**

üë§ –í–∞—à–∞ —Ä–æ–ª—å: **{role.title()}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞  
/delete - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/list - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role == "unauthorized":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:**
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
/delete - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞

üìä **–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:**
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

‚ùì **–ü–æ–º–æ—â—å:**
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üîç **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–∫–æ—Ä–æ):**
"–°–∫–æ–ª—å–∫–æ team-member –≤ worship?"
"–ö—Ç–æ –∂–∏–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ 203A?"
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /add
# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role != "coordinator":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    context.user_data['waiting_for_participant'] = True
    
    template_text = """
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞**

üî¥ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:**
- –ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
- –ü–æ–ª (M/F, –º—É–∂/–∂–µ–Ω)
- –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã (XS, S, M, L, XL, XXL)
- –¶–µ—Ä–∫–æ–≤—å
- –†–æ–ª—å (CANDIDATE/–∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ TEAM/–∫–æ–º–∞–Ω–¥–∞)
- –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è TEAM): Worship, Media, Kitchen, Setup, ROE, Chapel, Palanka, Administration, Decoration, Bell, Refreshment, –î—É—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ, –†–µ–∫—Ç–æ—Ä–∞—Ç

üü° **–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï:**
- –ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
- –ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞
- –ö—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–µ–ª–µ—Ñ–æ–Ω, email)

ü§ñ **–ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ** - –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å –∏ –ø–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

‚ùå /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
    """
    
    await update.message.reply_text(template_text, parse_mode='Markdown')
# –ö–æ–º–∞–Ω–¥–∞ /edit
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role != "coordinator":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    await update.message.reply_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /edit 123 - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID 123",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /delete
async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role != "coordinator":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    await update.message.reply_text(
        "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /delete 123 - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID 123",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /list
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role == "unauthorized":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    participants = get_all_participants()
    
    if not participants:
        await update.message.reply_text("üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", parse_mode='Markdown')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    message = f"üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(participants)} —á–µ–ª.):**\n\n"
    
    for p in participants:
        role_emoji = "üë§" if p['Role'] == 'CANDIDATE' else "üë®‚Äçüíº"
        department = f" ({p['Department']})" if p['Department'] else ""
        
        message += f"{role_emoji} **{p['FullNameRU']}**\n"
        message += f"   ‚Ä¢ –†–æ–ª—å: {p['Role']}{department}\n"
        message += f"   ‚Ä¢ ID: {p['id']}\n\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /export
async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    
    if role == "unauthorized":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await update.message.reply_text(
        "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /export worship team - —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ worship –∫–æ–º–∞–Ω–¥—ã",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def process_participant_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, is_update: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""

    # –ö–æ–ø–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text.startswith('üîç') or '–í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª' in text:
        parsed = parse_confirmation_template(text)
        is_update = False
    else:
        parsed = parse_participant_data(text, is_update=is_update)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ—á–µ—á–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    partial_update = is_update and 0 < len(parsed) <= 2

    if partial_update:
        if not parsed:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω—è–ª —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ü–æ–ª –∂–µ–Ω—Å–∫–∏–π' –∏–ª–∏ '–†–∞–∑–º–µ—Ä M'"
            )
            return
        existing = context.user_data.get('parsed_participant', {})
        participant_data = merge_participant_data(existing, parsed)
    else:
        participant_data = parsed
    
    valid, error = validate_participant_data(participant_data)
    if not valid:
        await update.message.reply_text(f"‚ùå {error}")
        return

    existing_participant = None
    if not is_update:
        existing_participant = find_participant_by_name(participant_data['FullNameRU'])
    
    if existing_participant:
        # –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å
        context.user_data['parsed_participant'] = participant_data
        context.user_data['waiting_for_participant'] = False
        context.user_data['confirming_duplicate'] = True
        
        duplicate_warning = f"""
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**

üÜî **–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {existing_participant['id']}):**
üë§ –ò–º—è: {existing_participant['FullNameRU']}
‚ö• –ü–æ–ª: {existing_participant['Gender']}
üë• –†–æ–ª—å: {existing_participant['Role']}
‚õ™ –¶–µ—Ä–∫–æ–≤—å: {existing_participant['Church']}

üîÑ **–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üë§ –ò–º—è: {participant_data['FullNameRU']}
‚ö• –ü–æ–ª: {participant_data['Gender']}
üë• –†–æ–ª—å: {participant_data['Role']}
‚õ™ –¶–µ—Ä–∫–æ–≤—å: {participant_data['Church']}

‚ùì **–ß—Ç–æ –¥–µ–ª–∞—Ç—å?**
- **–î–ê** - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤–æ–∑–º–æ–∂–µ–Ω –¥—É–±–ª—å)
- **–ù–ï–¢** - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
- **–ó–ê–ú–ï–ù–ò–¢–¨** - –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

‚ùå /cancel –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        """
        
        await update.message.reply_text(duplicate_warning, parse_mode='Markdown')
        return

    if partial_update:
        changes = []
        for field, new_value in parsed.items():
            old_value = existing.get(field, '')
            if old_value != new_value:
                label = FIELD_LABELS.get(field, field)
                emoji = FIELD_EMOJIS.get(field, '')
                changes.append(f"{emoji} **{label}:** {old_value or '‚Äî'} ‚Üí {new_value}")

        context.user_data['parsed_participant'] = participant_data
        context.user_data['waiting_for_participant'] = False
        context.user_data['confirming_participant'] = True

        confirmation_text = (
            "üîÑ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**\n\n"
            "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–æ:**\n" + "\n".join(changes) +
            "\n\nüë§ **–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n" +
            format_participant_block(participant_data) +
            "\n\n‚úÖ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?**\n"
            "- –ù–∞–ø–∏—à–∏—Ç–µ **–î–ê** –∏–ª–∏ **–ù–ï–¢**\n"
            "- –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )

        await update.message.reply_text(confirmation_text, parse_mode='Markdown')
        return
    
    # –î—É–±–ª–µ–π –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    context.user_data['parsed_participant'] = participant_data
    context.user_data['waiting_for_participant'] = False
    context.user_data['confirming_participant'] = True
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = f"""
üîç **–í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:**

üë§ **–ò–º—è (—Ä—É—Å):** {participant_data['FullNameRU'] or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåç **–ò–º—è (–∞–Ω–≥–ª):** {participant_data['FullNameEN'] or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ö• **–ü–æ–ª:** {participant_data['Gender']}
üëï **–†–∞–∑–º–µ—Ä:** {participant_data['Size'] or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚õ™ **–¶–µ—Ä–∫–æ–≤—å:** {participant_data['Church'] or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë• **–†–æ–ª—å:** {participant_data['Role']}"""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è TEAM
    if participant_data['Role'] == 'TEAM':
        confirmation_text += f"\nüè¢ **–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:** {participant_data['Department'] or '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è TEAM)'}"
    
    confirmation_text += f"""
üèôÔ∏è **–ì–æ—Ä–æ–¥:** {participant_data['CountryAndCity'] or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë®‚Äçüíº **–ö—Ç–æ –ø–æ–¥–∞–ª:** {participant_data['SubmittedBy'] or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {participant_data['ContactInformation'] or '‚ûñ –ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚úÖ **–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?**
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ **–î–ê** –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ **–ù–ï–¢** –¥–ª—è –æ—Ç–º–µ–Ω—ã
- –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–ø–ª–µ–π—Ç—É

‚ùå /cancel –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    """
    
    await update.message.reply_text(confirmation_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)

    if role == "unauthorized":
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    message_text = update.message.text.strip()

    # –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"User {user_id} state: {context.user_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if context.user_data.get('waiting_for_participant'):
        await process_participant_confirmation(update, context, message_text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if context.user_data.get('confirming_participant'):
        await handle_participant_confirmation(update, context, message_text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥—É–±–ª–µ–π
    if context.user_data.get('confirming_duplicate'):
        await handle_participant_confirmation(update, context, message_text)
        return
    
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await update.message.reply_text(
        f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{message_text}\"\n\n"
        "üîß NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        parse_mode='Markdown'
    )
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_participant_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    normalized = re.sub(r'[\s\.,!]', '', text.upper())

    if not normalized:
        await update.message.reply_text(
            "‚ùì –û—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )
        return

    positive = ['–î–ê', 'YES', 'Y', '–û–ö', 'OK', '+']
    negative = ['–ù–ï–¢', 'NO', 'N', '-', '–ù–ò–°–¢', '–ù–ò–¢']
    
    def is_positive(txt: str) -> bool:
        return txt in positive or any(txt.startswith(p) for p in positive)

    def is_negative(txt: str) -> bool:
        return txt in negative or any(txt.startswith(n) for n in negative)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π
    if context.user_data.get('confirming_duplicate'):
        participant_data = context.user_data['parsed_participant']

        if is_positive(normalized):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥—É–±–ª—å
            participant_id = add_participant(participant_data)
            context.user_data.clear()
            
            await update.message.reply_text(
                f"‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π (–≤–æ–∑–º–æ–∂–µ–Ω –¥—É–±–ª—å)**\n\n"
                f"üÜî ID: {participant_id}\n"
                f"üë§ –ò–º—è: {participant_data['FullNameRU']}\n\n"
                f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                parse_mode='Markdown'
            )
            
        elif normalized in ['–ó–ê–ú–ï–ù–ò–¢–¨', 'REPLACE', '–û–ë–ù–û–í–ò–¢–¨', 'UPDATE']:
            # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            existing = find_participant_by_name(participant_data['FullNameRU'])
            if existing:
                updated = update_participant(existing['id'], participant_data)
                context.user_data.clear()
                
                if updated:
                    await update.message.reply_text(
                        f"üîÑ **–£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                        f"üÜî ID: {existing['id']}\n"
                        f"üë§ –ò–º—è: {participant_data['FullNameRU']}\n"
                        f"üë• –†–æ–ª—å: {participant_data['Role']}\n\n"
                        f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            
        elif is_negative(normalized):
            # –û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            context.user_data.clear()
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ **–î–ê** - –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª—å\n"
                "‚Ä¢ **–ù–ï–¢** - –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                "‚Ä¢ **–ó–ê–ú–ï–ù–ò–¢–¨** - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"
            )
        return
    
    # –û–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–±–µ–∑ –¥—É–±–ª–µ–π)
    if is_positive(normalized):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant_data = context.user_data['parsed_participant']
        
        participant_id = add_participant(participant_data)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        success_text = f"‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüÜî **ID:** {participant_id}\n"
        success_text += f"üë§ **–ò–º—è:** {participant_data['FullNameRU']}\n"
        success_text += f"‚ö• **–ü–æ–ª:** {participant_data['Gender']}\n"
        success_text += f"üëï **–†–∞–∑–º–µ—Ä:** {participant_data['Size']}\n"
        success_text += f"‚õ™ **–¶–µ—Ä–∫–æ–≤—å:** {participant_data['Church']}\n"
        success_text += f"üë• **–†–æ–ª—å:** {participant_data['Role']}\n"

        if participant_data['Role'] == 'TEAM':
            success_text += f"üè¢ **–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:** {participant_data['Department']}\n"

        if participant_data['SubmittedBy']:
            success_text += f"üë®‚Äçüíº **–ö—Ç–æ –ø–æ–¥–∞–ª:** {participant_data['SubmittedBy']}\n"

        if participant_data['ContactInformation']:
            success_text += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {participant_data['ContactInformation']}\n"

        success_text += f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

        await update.message.reply_text(success_text, parse_mode='Markdown')
        
    elif is_negative(normalized):
        # –û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
        )
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await process_participant_confirmation(update, context, text, is_update=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_command))
    application.add_handler(CommandHandler("edit", edit_command))
    application.add_handler(CommandHandler("delete", delete_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("export", export_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print(f"ü§ñ –ë–æ—Ç @{BOT_USERNAME} –∑–∞–ø—É—â–µ–Ω!")
    print("üîÑ Polling started...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()