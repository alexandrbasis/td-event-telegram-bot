import logging
from logging.handlers import RotatingFileHandler
import re
from typing import List, Dict, Optional
from dataclasses import asdict
from telegram import Update
from functools import wraps
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from config import BOT_TOKEN, BOT_USERNAME, COORDINATOR_IDS, VIEWER_IDS
from utils.decorators import require_role
from utils.cache import load_reference_data
from database import init_database
from repositories.participant_repository import SqliteParticipantRepository
from services.participant_service import ParticipantService
from parsers.participant_parser import (
    parse_participant_data,
    is_template_format,
    parse_template_format,
    parse_unstructured_text,
    normalize_field_value,
)
from services.participant_service import (
    merge_participant_data,
    format_participant_block,
    detect_changes,
    get_edit_keyboard,
    FIELD_LABELS,
)
from utils.validators import validate_participant_data
from utils.exceptions import (
    BotException,
    ParticipantNotFoundError,
    ValidationError,
)
from messages import MESSAGES
from states import CONFIRMING_DATA, CONFIRMING_DUPLICATE, COLLECTING_DATA


def cleanup_on_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""

    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except Exception as e:
            user_id = update.effective_user.id if update.effective_user else "unknown"
            logger.error(
                f"Error in {func.__name__} for user {user_id}: {type(e).__name__}: {e}",
                exc_info=True,
            )

            cleanup_user_data_safe(context, update.effective_user.id)
            logger.info(f"Cleared user_data for user {user_id} due to error in {func.__name__}")

            try:
                if update.message:
                    await update.message.reply_text(
                        "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.**\n\n"
                        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /add\n"
                        "üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode='Markdown',
                    )
                elif update.callback_query:
                    await update.callback_query.answer()
                    await update.callback_query.message.reply_text(
                        "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.**\n\n"
                        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /add",
                        parse_mode='Markdown',
                    )
            except Exception as send_error:
                logger.error(f"Failed to send error message to user {user_id}: {send_error}")

            return ConversationHandler.END

    return wrapper


def cleanup_user_data_safe(context: ContextTypes.DEFAULT_TYPE, user_id: int = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ user_data —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""

    if context.user_data:
        keys_to_clear = list(context.user_data.keys())
        context.user_data.clear()
        logger.info(
            f"Manually cleared user_data for user {user_id or 'unknown'}: removed keys {keys_to_clear}"
        )
    else:
        logger.debug(f"user_data already empty for user {user_id or 'unknown'}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
handler = RotatingFileHandler('bot.log', maxBytes=10*1024*1024, backupCount=5)
handler.setFormatter(logging.Formatter(LOG_FORMAT))
logging.basicConfig(level=logging.INFO, handlers=[handler], format=LOG_FORMAT)
logger = logging.getLogger(__name__)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
sql_handler = RotatingFileHandler('sql.log', maxBytes=10*1024*1024, backupCount=5)
sql_handler.setFormatter(logging.Formatter(LOG_FORMAT))
sql_logger = logging.getLogger('sql')
sql_logger.setLevel(logging.INFO)
sql_logger.addHandler(sql_handler)

# Initialize repository and service instances
participant_repository = SqliteParticipantRepository()
participant_service = ParticipantService(repository=participant_repository)

# --- REQUIRED AND OPTIONAL FIELDS ---
REQUIRED_FIELDS = ['FullNameRU', 'Gender', 'Size', 'Church', 'Role']
OPTIONAL_FIELDS = ['FullNameEN', 'CountryAndCity', 'SubmittedBy', 'ContactInformation', 'Department']


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_role(user_id):
    if user_id in COORDINATOR_IDS:
        return "coordinator"
    elif user_id in VIEWER_IDS:
        return "viewer"
    else:
        return "unauthorized"


async def show_confirmation(update: Update, participant_data: Dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    confirmation_text = "üîç –í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n\n"
    confirmation_text += format_participant_block(participant_data)
    confirmation_text += "\n\n‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ **–î–ê** –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ **–ù–ï–¢** –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    confirmation_text += "\n\n‚úèÔ∏è **–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.**"

    keyboard = get_edit_keyboard(participant_data)

    await update.message.reply_text(
        confirmation_text,
        parse_mode='Markdown',
        reply_markup=keyboard,
    )

# --- HELPER FUNCTIONS (NEW) ---

def get_missing_fields(participant_data: Dict) -> List[str]:
    """Checks for missing required fields."""
    missing = []
    for field in REQUIRED_FIELDS:
        if not participant_data.get(field):
            missing.append(FIELD_LABELS.get(field, field))

    if participant_data.get('Role') == 'TEAM' and not participant_data.get('Department'):
        missing.append(FIELD_LABELS.get('Department', 'Department'))
    return missing


def format_status_message(participant_data: Dict) -> str:
    """Creates a status message with filled data and missing fields."""
    message = "üìù **–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**\n\n"
    message += format_participant_block(participant_data)
    message += "\n\n"

    missing = get_missing_fields(participant_data)
    if missing:
        message += "üî¥ **–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å:**\n- " + "\n- ".join(missing)
        message += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    else:
        message += "‚úÖ **–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!**\n\n"
        message += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–î–ê** –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ **–ù–ï–¢** –¥–ª—è –æ—Ç–º–µ–Ω—ã."

    return message

# –ö–æ–º–∞–Ω–¥–∞ /start
@require_role("viewer")
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s started /start", user_id)
    
    welcome_text = f"""
üèïÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Tres Dias Israel!**

üë§ –í–∞—à–∞ —Ä–æ–ª—å: **{role.title()}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞  
/delete - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
/list - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /help
@require_role("viewer")
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s requested help", user_id)
    
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:**
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
/delete - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞

üìä **–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:**
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

‚ùì **–ü–æ–º–æ—â—å:**
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üîç **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–∫–æ—Ä–æ):**
"–°–∫–æ–ª—å–∫–æ team-member –≤ worship?"
"–ö—Ç–æ –∂–∏–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ 203A?"
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /add
@require_role("coordinator")
@cleanup_on_error
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the /add flow and initializes the session."""
    user_id = update.effective_user.id
    logger.info("User %s started add participant", user_id)

    context.user_data['add_flow_data'] = {
        'FullNameRU': None,
        'Gender': None,
        'Size': None,
        'Church': None,
        'Role': None,
        'Department': None,
        'FullNameEN': None,
        'CountryAndCity': None,
        'SubmittedBy': None,
        'ContactInformation': None,
    }

    await update.message.reply_text(
        "üöÄ **–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n"
        "1Ô∏è‚É£ **–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω** (–ø—Ä–∏—à–ª—é –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).\n"
        "2Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π**, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç–æ–π (`,`) –∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "3Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é** –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–¶–µ—Ä–∫–æ–≤—å –ì—Ä–µ–π—Å`).\n\n"
        "*–î–ª—è —Å–∞–º–æ–π —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—ã–µ –∏–ª–∏ –≤–≤–æ–¥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.*\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    await update.message.reply_text(MESSAGES['ADD_TEMPLATE'])
    return COLLECTING_DATA


@require_role("coordinator")
@cleanup_on_error
async def handle_partial_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Collects and processes partial data, supporting multiple formats."""
    text = update.message.text.strip()
    participant_data = context.user_data.get('add_flow_data', {})

    # 1. Check if user pasted a full template (highest priority)
    if is_template_format(text):
        parsed_update = parse_template_format(text)
        for key, value in parsed_update.items():
            if value:
                participant_data[key] = value
    else:
        # 2. Try splitting by newline or comma to detect multiple fields
        chunks = []
        if "\n" in text:
            chunks = [c.strip() for c in text.split("\n") if c.strip()]
        elif "," in text:
            chunks = [c.strip() for c in text.split(",") if c.strip()]
        else:
            chunks = [text]

        # Parse each chunk separately
        for chunk in chunks:
            if not chunk:
                continue

            if ':' in chunk:
                parsed_chunk = parse_participant_data(chunk, is_update=True)
            else:
                parsed_chunk = parse_unstructured_text(chunk)

            for key, value in parsed_chunk.items():
                if value:
                    participant_data[key] = value

    # --- NAME DUPLICATE CHECK BLOCK ---
    newly_identified_name = participant_data.get('FullNameRU')
    if newly_identified_name and not context.user_data.get('participant_id'):
        existing_participant = participant_service.check_duplicate(newly_identified_name)
        if existing_participant:
            context.user_data['participant_id'] = existing_participant.id
            existing_dict = asdict(existing_participant)
            context.user_data['add_flow_data'] = existing_dict
            context.user_data['parsed_participant'] = existing_dict
            await update.message.reply_text(
                f"‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º '{newly_identified_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            await show_confirmation(update, existing_dict)
            return CONFIRMING_DATA

    context.user_data['add_flow_data'] = participant_data

    missing_fields = get_missing_fields(participant_data)

    if not missing_fields:
        context.user_data['parsed_participant'] = participant_data
        await show_confirmation(update, participant_data)
        return CONFIRMING_DATA
    else:
        status_message = format_status_message(participant_data)
        await update.message.reply_text(status_message, parse_mode='Markdown')
        return COLLECTING_DATA
# –ö–æ–º–∞–Ω–¥–∞ /edit
@require_role("coordinator")
async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s started edit participant", user_id)
    
    await update.message.reply_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /edit 123 - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID 123",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /delete
@require_role("coordinator")
async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s started delete participant", user_id)
    
    await update.message.reply_text(
        "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /delete 123 - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID 123",
        parse_mode='Markdown'
    )

@require_role("coordinator")
async def edit_field_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ‚úÖ –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_field 123 FullNameRU "–ù–æ–≤–æ–µ –∏–º—è"
    """
    try:
        parts = update.message.text.split(' ', 3)
        if len(parts) < 4:
            await update.message.reply_text(
                "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** /edit_field ID –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** /edit_field 123 FullNameRU \"–ù–æ–≤–æ–µ –∏–º—è\"",
                parse_mode='Markdown'
            )
            return

        _, participant_id, field_name, new_value = parts
        participant_id = int(participant_id)

        if not participant_service.participant_exists(participant_id):
            await update.message.reply_text(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {participant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        kwargs = {field_name: new_value}
        success = participant_service.update_participant_fields(participant_id, **kwargs)

        if success:
            await update.message.reply_text(
                f"‚úÖ **–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"üÜî ID: {participant_id}\n"
                f"üìù –ü–æ–ª–µ: {field_name}\n"
                f"üîÑ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è")

    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except ParticipantNotFoundError as e:
        await update.message.reply_text(f"‚ùå {e}")
    except Exception as e:
        logger.error("Error in edit_field_command: %s", e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è")

# –ö–æ–º–∞–Ω–¥–∞ /list
@require_role("viewer")
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s requested participants list", user_id)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    participants = participant_service.get_all_participants()
    
    if not participants:
        await update.message.reply_text("üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", parse_mode='Markdown')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    message = f"üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(participants)} —á–µ–ª.):**\n\n"
    
    for p in participants:
        role_emoji = "üë§" if p.Role == 'CANDIDATE' else "üë®‚Äçüíº"
        department = f" ({p.Department})" if p.Role == 'TEAM' and p.Department else ""

        message += f"{role_emoji} **{p.FullNameRU}**\n"
        message += f"   ‚Ä¢ –†–æ–ª—å: {p.Role}{department}\n"
        message += f"   ‚Ä¢ ID: {p.id}\n\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /export
@require_role("viewer")
async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    logger.info("User %s requested export", user_id)
    
    await update.message.reply_text(
        "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** (–∑–∞–≥–ª—É—à–∫–∞)\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /export worship team - —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ worship –∫–æ–º–∞–Ω–¥—ã",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /cancel
@require_role("viewer")
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'add_flow_data' in context.user_data:
        context.user_data.clear()
        logger.info("User %s cancelled the add flow.", update.effective_user.id)
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        logger.info("User %s cancelled a non-existent operation.", update.effective_user.id)
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    return ConversationHandler.END
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def process_participant_confirmation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    is_update: bool = False,
) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""

    # –ö–æ–ø–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_block = ('–ò–º—è (—Ä—É—Å):' in text and '–ü–æ–ª:' in text)
    if text.startswith('üîç') or '–í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª' in text or is_block:
        parsed = parse_template_format(text)
    else:
        parsed = parse_participant_data(text, is_update=is_update)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ—á–µ—á–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–ª–∏ –º–∞—Å—Å–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    existing = context.user_data.get('parsed_participant', {}) if is_update else {}

    if is_update:
        participant_data = merge_participant_data(existing, parsed)
    else:
        participant_data = parsed
    
    valid, error = validate_participant_data(participant_data)
    if not valid:
        logger.error("Parsing error: %s | Text: %s", error, text)
        await update.message.reply_text(f"‚ùå {error}")
        return COLLECTING_DATA

    existing_participant = None
    if not is_update:
        existing_participant = participant_service.check_duplicate(
            participant_data['FullNameRU']
        )
    
    if existing_participant:
        # –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        merged_data = merge_participant_data(existing_participant, participant_data)
        context.user_data['parsed_participant'] = merged_data
        context.user_data['duplicate'] = True
        
        duplicate_warning = f"""
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**

üÜî **–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ (ID: {existing_participant.id}):**
üë§ –ò–º—è: {existing_participant.FullNameRU}
‚ö• –ü–æ–ª: {existing_participant.Gender}
üë• –†–æ–ª—å: {existing_participant.Role}
‚õ™ –¶–µ—Ä–∫–æ–≤—å: {existing_participant.Church}

üîÑ **–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üë§ –ò–º—è: {participant_data['FullNameRU']}
‚ö• –ü–æ–ª: {participant_data['Gender']}
üë• –†–æ–ª—å: {participant_data['Role']}
‚õ™ –¶–µ—Ä–∫–æ–≤—å: {participant_data['Church']}

‚ùì **–ß—Ç–æ –¥–µ–ª–∞—Ç—å?**
- **–î–ê** - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤–æ–∑–º–æ–∂–µ–Ω –¥—É–±–ª—å)
- **–ù–ï–¢** - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
- **–ó–ê–ú–ï–ù–ò–¢–¨** - –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

‚ùå /cancel –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        """
        
        await update.message.reply_text(duplicate_warning, parse_mode='Markdown')
        return CONFIRMING_DUPLICATE

    if is_update:
        changes = detect_changes(existing, participant_data)
        if not changes:
            await update.message.reply_text(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢."
            )
            return CONFIRMING_DATA

        context.user_data['parsed_participant'] = participant_data
        context.user_data['duplicate'] = False
        confirmation_text = (
            "üîÑ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**\n\n"
            "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–æ:**\n" + "\n".join(changes) +
            "\n\nüë§ **–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n" +
            format_participant_block(participant_data) +
            "\n\n‚úÖ **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?**\n"
            "- –ù–∞–ø–∏—à–∏—Ç–µ **–î–ê** –∏–ª–∏ **–ù–ï–¢**\n"
            "- –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" +
            "\n\n‚úèÔ∏è **–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.**"
        )

        keyboard = get_edit_keyboard(participant_data)

        await update.message.reply_text(
            confirmation_text,
            parse_mode='Markdown',
            reply_markup=keyboard,
        )
        return CONFIRMING_DATA
    
    # –î—É–±–ª–µ–π –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    context.user_data['parsed_participant'] = participant_data
    context.user_data['duplicate'] = False
    
    await show_confirmation(update, participant_data)
    return CONFIRMING_DATA

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@require_role("viewer")
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    logger.info("User %s sent message: %s", user_id, message_text)

    # –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"User {user_id} state: {context.user_data}")
    
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await update.message.reply_text(
        f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{message_text}\"\n\n"
        "üîß NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        parse_mode='Markdown'
    )
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@cleanup_on_error
async def handle_participant_confirmation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    text = update.message.text.strip()
    logger.info("User %s confirmation message: %s", update.effective_user.id, text)

    field_to_edit = context.user_data.get('field_to_edit')
    if field_to_edit:
        new_value = text.strip()
        participant_data = context.user_data.get('parsed_participant', {})

        normalized_value = normalize_field_value(field_to_edit, new_value)

        participant_data[field_to_edit] = normalized_value

        context.user_data['parsed_participant'] = participant_data
        context.user_data.pop('field_to_edit')

        await show_confirmation(update, participant_data)
        return CONFIRMING_DATA
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –±–ª–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–ª–∏–∫–æ–º
    if is_template_format(text):
        parsed = parse_template_format(text)
        existing = context.user_data.get('parsed_participant', {})
        participant_data = merge_participant_data(existing, parsed)
        changes = detect_changes(existing, participant_data)
        if not changes:
            await update.message.reply_text(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢."
            )
            return CONFIRMING_DATA
        context.user_data['parsed_participant'] = participant_data
        await show_confirmation(update, participant_data)
        return CONFIRMING_DATA

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    normalized = re.sub(r'[\s\.,!]', '', text.upper())

    if not normalized:
        await update.message.reply_text(
            "‚ùì –û—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )
        return CONFIRMING_DATA

    positive = ['–î–ê', 'YES', 'Y', '–û–ö', 'OK', '+']
    negative = ['–ù–ï–¢', 'NO', 'N', '-', '–ù–ò–°–¢', '–ù–ò–¢']
    
    def is_positive(txt: str) -> bool:
        return txt in positive or any(txt.startswith(p) for p in positive)

    def is_negative(txt: str) -> bool:
        return txt in negative or any(txt.startswith(n) for n in negative)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π
    if context.user_data.get('duplicate'):
        participant_data = context.user_data['parsed_participant']

        if is_positive(normalized):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥—É–±–ª—å
            try:
                participant_id = participant_service.add_participant(participant_data)
            except ValidationError as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                return ConversationHandler.END
            except ParticipantNotFoundError as e:  # unlikely here
                await update.message.reply_text(str(e))
                return ConversationHandler.END
            except BotException as e:
                logger.error("Error adding participant: %s", e)
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞."
                )
                return ConversationHandler.END
            cleanup_user_data_safe(context, update.effective_user.id)
            
            await update.message.reply_text(
                f"‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π (–≤–æ–∑–º–æ–∂–µ–Ω –¥—É–±–ª—å)**\n\n"
                f"üÜî ID: {participant_id}\n"
                f"üë§ –ò–º—è: {participant_data['FullNameRU']}\n\n"
                f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                parse_mode='Markdown'
            )
            
        elif normalized in ['–ó–ê–ú–ï–ù–ò–¢–¨', 'REPLACE', '–û–ë–ù–û–í–ò–¢–¨', 'UPDATE']:
            # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            existing = participant_service.check_duplicate(participant_data['FullNameRU'])
            if existing:
                try:
                    updated = participant_service.update_participant(existing.id, participant_data)
                except ValidationError as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                    return ConversationHandler.END
                except ParticipantNotFoundError as e:
                    await update.message.reply_text(str(e))
                    return ConversationHandler.END
                except BotException as e:
                    logger.error("Error updating participant: %s", e)
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞."
                    )
                    return ConversationHandler.END
                cleanup_user_data_safe(context, update.effective_user.id)
                
                if updated:
                    await update.message.reply_text(
                        f"üîÑ **–£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                        f"üÜî ID: {existing.id}\n"
                        f"üë§ –ò–º—è: {participant_data['FullNameRU']}\n"
                        f"üë• –†–æ–ª—å: {participant_data['Role']}\n\n"
                        f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            
        elif is_negative(normalized):
            # –û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            cleanup_user_data_safe(context, update.effective_user.id)
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ **–î–ê** - –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª—å\n"
                "‚Ä¢ **–ù–ï–¢** - –æ—Ç–º–µ–Ω–∏—Ç—å\n"
                "‚Ä¢ **–ó–ê–ú–ï–ù–ò–¢–¨** - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"
            )
        return CONFIRMING_DUPLICATE
    
    # –û–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–±–µ–∑ –¥—É–±–ª–µ–π)
    if is_positive(normalized):
        participant_data = context.user_data.get('parsed_participant', {})
        participant_id = context.user_data.get('participant_id')

        try:
            if participant_id:
                participant_service.update_participant(participant_id, participant_data)
            else:
                participant_id = participant_service.add_participant(participant_data)
        except ValidationError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END
        except ParticipantNotFoundError as e:
            await update.message.reply_text(str(e))
            return ConversationHandler.END
        except BotException as e:
            logger.error("Error saving participant: %s", e)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞."
            )
            return ConversationHandler.END

        was_update = bool(context.user_data.get('participant_id'))
        cleanup_user_data_safe(context, update.effective_user.id)

        success_text = (
            "‚úÖ **–î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**"
            if was_update
            else "‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**"
        )
        success_text += f"\n\nüÜî **ID:** {participant_id}\n"
        success_text += f"üë§ **–ò–º—è:** {participant_data['FullNameRU']}\n"
        success_text += f"‚ö• **–ü–æ–ª:** {participant_data['Gender']}\n"
        success_text += f"üëï **–†–∞–∑–º–µ—Ä:** {participant_data['Size']}\n"
        success_text += f"‚õ™ **–¶–µ—Ä–∫–æ–≤—å:** {participant_data['Church']}\n"
        success_text += f"üë• **–†–æ–ª—å:** {participant_data['Role']}\n"

        if participant_data['Role'] == 'TEAM':
            success_text += f"üè¢ **–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:** {participant_data['Department']}\n"

        if participant_data['SubmittedBy']:
            success_text += f"üë®‚Äçüíº **–ö—Ç–æ –ø–æ–¥–∞–ª:** {participant_data['SubmittedBy']}\n"

        if participant_data['ContactInformation']:
            success_text += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {participant_data['ContactInformation']}\n"

        success_text += f"\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

        await update.message.reply_text(success_text, parse_mode='Markdown')
        return ConversationHandler.END

    elif is_negative(normalized):
        # –û—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        cleanup_user_data_safe(context, update.effective_user.id)
        await update.message.reply_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
        )
        return ConversationHandler.END

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return await process_participant_confirmation(update, context, text, is_update=True)


@cleanup_on_error
async def edit_field_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è."""
    query = update.callback_query
    await query.answer()

    field_to_edit = query.data.split('_')[1]
    context.user_data['field_to_edit'] = field_to_edit

    await query.edit_message_text(
        text=f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è **{field_to_edit}**",
        parse_mode='Markdown'
    )

    return CONFIRMING_DATA

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –≤ –∫—ç—à
    load_reference_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))

    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            COLLECTING_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_partial_data)],
            CONFIRMING_DATA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_participant_confirmation),
                CallbackQueryHandler(edit_field_callback, pattern="^edit_")
            ],
            CONFIRMING_DUPLICATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_participant_confirmation)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
    )

    application.add_handler(add_conv)
    application.add_handler(CommandHandler("edit", edit_command))
    application.add_handler(CommandHandler("edit_field", edit_field_command))
    application.add_handler(CommandHandler("delete", delete_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("export", export_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print(f"ü§ñ –ë–æ—Ç @{BOT_USERNAME} –∑–∞–ø—É—â–µ–Ω!")
    print("üîÑ Polling started...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
