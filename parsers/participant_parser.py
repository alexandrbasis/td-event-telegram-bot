from typing import Dict, Optional
import re

GENDER_KEYWORDS = {
    'M': ['M', '–ú–£–ñ', '–ú–£–ñ–°–ö–û–ô', 'MALE', '–ú', '–ú–£–ñ–ß–ò–ù–ê'],
    'F': ['F', '–ñ–ï–ù', '–ñ–ï–ù–°–ö–ò–ô', 'FEMALE', '–ñ', '–ñ–ï–ù–©–ò–ù–ê']
}

ROLE_KEYWORDS = {
    'TEAM': ['TEAM', '–ö–û–ú–ê–ù–î–ê', '–¢–ò–ú', 'TIM', 'TEAM MEMBER', '–ß–õ–ï–ù –ö–û–ú–ê–ù–î–´', '–ö–û–ú–ê–ù–î–ù–´–ô', '–°–õ–£–ñ–ò–¢–ï–õ–¨'],
    'CANDIDATE': ['CANDIDATE', '–ö–ê–ù–î–ò–î–ê–¢', '–£–ß–ê–°–¢–ù–ò–ö', '–ö–ê–ù–î–ò–î–ê–¢–ö–ê']
}

DEPARTMENT_KEYWORDS = {
    'ROE': [
        'ROE', '–†–û–ï', 'ROE ROOM', '–†–û–ï –†–£–ú', '–†–û–≠', '–†–û–ò',
        'roe', '—Ä–æ–µ', 'roe room', '—Ä–æ–µ —Ä—É–º', '—Ä–æ—ç'
    ],
    'Chapel': ['CHAPEL', '–ú–û–õ–ò–¢–í–ï–ù–ù–´–ô', '–ú–û–õ–ò–¢–í–ê', 'PRAYER', '–ß–ê–°–û–í–ù–Ø'],
    'Setup': ['SETUP', '–°–ï–¢–ê–ü', '–ù–ê–°–¢–†–û–ô–ö–ê', '–ü–û–î–ì–û–¢–û–í–ö–ê', '–°–ï–¢ –ê–ü'],
    'Palanka': ['PALANKA', '–ü–ê–õ–ê–ù–ö–ê', '–ü–û–õ–ê–ù–ö–ê'],
    'Administration': ['ADMINISTRATION', '–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø', '–ê–î–ú–ò–ù', 'ADMIN', '–£–ü–†–ê–í–õ–ï–ù–ò–ï'],
    'Kitchen': ['KITCHEN', '–ö–£–•–ù–Ø', '–ö–ò–¢–ß–ï–ù', '–ö–£–õ–ò–ù–ê–†–ò–Ø', '–ü–û–í–ê–†–ê'],
    'Decoration': ['DECORATION', '–î–ï–ö–û–†–ê–¶–ò–ò', '–î–ï–ö–û–†', 'DECO', 'DECOR', '–£–ö–†–ê–®–ï–ù–ò–Ø', '–û–§–û–†–ú–õ–ï–ù–ò–ï'],
    'Bell': ['BELL', '–ó–í–û–ù–ê–†–¨', '–ë–ï–õ–õ', '–ó–í–û–ù', '–ö–û–õ–û–ö–û–õ–¨–ß–ò–ö'],
    'Refreshment': ['REFRESHMENT', '–†–ï–§–†–ï–®–ú–ï–ù–¢', '–£–ì–û–©–ï–ù–ò–Ø', '–ù–ê–ü–ò–¢–ö–ò'],
    'Worship': ['WORSHIP', '–ü–†–û–°–õ–ê–í–õ–ï–ù–ò–ï', '–í–û–†–®–ò–ü', '–ú–£–ó–´–ö–ê', 'MUSIC'],
    'Media': ['MEDIA', '–ú–ï–î–ò–ê', '–í–ò–î–ï–û', '–§–û–¢–û', '–°–™–ï–ú–ö–ê', '–ö–ê–ú–ï–†–ê', '–§–û–¢–û–ì–†–ê–§'],
    '–î—É—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ': ['–î–£–•–û–í–ï–ù–°–¢–í–û', 'CLERGY', '–°–í–Ø–©–ï–ù–ù–ò–ö–ò'],
    '–†–µ–∫—Ç–æ—Ä–∞—Ç': ['–†–ï–ö–¢–û–†–ê–¢', 'RECTOR', '–†–ï–ö–¢–û–†–´']
}

CHURCH_KEYWORDS = ['–¶–ï–†–ö–û–í–¨', 'CHURCH', '–•–†–ê–ú', '–û–ë–©–ò–ù–ê']
SIZES = [
    'XS', 'EXTRA SMALL', 'EXTRASMALL',
    'S', 'SMALL',
    'M', 'MEDIUM',
    'L', 'LARGE',
    'XL', 'EXTRA LARGE', 'EXTRALARGE',
    'XXL', '2XL', 'EXTRA EXTRA LARGE',
    '3XL', 'XXXL'
]

ISRAEL_CITIES = [
    '–•–ê–ô–§–ê', 'HAIFA', '–¢–ï–õ-–ê–í–ò–í', 'TEL AVIV', '–¢–ï–õ–¨-–ê–í–ò–í', '–ò–ï–†–£–°–ê–õ–ò–ú', 'JERUSALEM',
    '–ë–ï–≠–†-–®–ï–í–ê', 'BEER SHEVA', '–ù–ï–¢–ê–ù–ò–Ø', 'NETANYA', '–ê–®–î–û–î', 'ASHDOD',
    '–†–ò–®–û–ù-–õ–ï-–¶–ò–û–ù', '–†–ò–®–û–ù –õ–ï –¶–ò–û–ù', '–†–ò–®–û–ù-–õ–ï –¶–ò–û–ù', '–†–ò–®–û–ù –õ–ï–¶–ò–û–ù',
    'RISHON LEZION', 'RISHON-LEZION', 'RISHON LE ZION', 'RISHON-LE ZION',
    '–ü–ï–¢–ê–•-–¢–ò–ö–í–ê', 'PETAH TIKVA', '–†–ï–•–û–í–û–¢', 'REHOVOT',
    '–ë–ê–¢-–Ø–ú', 'BAT YAM', '–ö–ê–†–ú–ò–≠–õ–¨', 'CARMIEL', '–ú–û–î–ò–ò–ù', 'MODIIN', '–ù–ê–ó–ê–†–ï–¢', 'NAZARETH',
    '–ö–ò–†–¨–Ø–¢-–ì–ê–¢', 'KIRYAT GAT', '–≠–ô–õ–ê–¢', 'EILAT', '–ê–ö–ö–û', 'ACRE', '–†–ê–ú–ê–¢-–ì–ê–ù', 'RAMAT GAN',
    '–ë–ù–ï–ô-–ë–†–ê–ö', 'BNEI BRAK', '–¶–§–ê–¢', 'SAFED', '–¢–í–ï–†–ò–Ø', 'TIBERIAS', '–ì–ï–†–¶–õ–ò–Ø', 'HERZLIYA',
    '–ê–§–£–õ–ê', 'AFULA'
]

# –°–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –±–ª–æ–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
CONFIRMATION_NOISE_WORDS = {
    '–í–û–¢', '–ß–¢–û', '–Ø', '–ü–û–ù–Ø–õ', '–ò–ó', '–í–ê–®–ò–•', '–î–ê–ù–ù–´–•', '–ò–ú–Ø', '–†–£–°', '–ê–ù–ì–õ',
    '–ü–û–õ', '–†–ê–ó–ú–ï–†', '–ì–û–†–û–î', '–ö–¢–û', '–ü–û–î–ê–õ', '–ö–û–ù–¢–ê–ö–¢–´', '–ù–ï', '–£–ö–ê–ó–ê–ù–û', '–†–û–õ–¨',
    '–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢', '–í–°–ï–ì–û', '–ü–†–ê–í–ò–õ–¨–ù–û', '–û–¢–ü–†–ê–í–¨–¢–ï', '–î–ê', '–î–õ–Ø', '–°–û–•–†–ê–ù–ï–ù–ò–Ø',
    '–ù–ï–¢', '–û–¢–ú–ï–ù–´', '–ò–õ–ò', '–ü–†–ò–®–õ–ò–¢–ï', '–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï', '–ü–û', '–¢–ï–ú–ü–õ–ï–ô–¢–£',
    '–ü–û–õ–ù–û–ô', 'CANCEL'
}

# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
FIELD_INDICATORS = {
    'Gender': ['–ü–û–õ', 'GENDER'],
    'Size': ['–†–ê–ó–ú–ï–†', 'SIZE'],
    'Role': ['–†–û–õ–¨', 'ROLE'],
    'Department': ['–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢', 'DEPARTMENT'],
    'Church': ['–¶–ï–†–ö–û–í–¨', 'CHURCH'],
    'FullNameRU': ['–ò–ú–Ø', '–†–£–°–°–ö–ò–ô', 'NAME'],
    'FullNameEN': ['–ê–ù–ì–õ–ò–ô–°–ö–ò–ô', 'ENGLISH', '–ê–ù–ì–õ'],
    'CountryAndCity': ['–ì–û–†–û–î', 'CITY', '–°–¢–†–ê–ù–ê'],
    'SubmittedBy': ['–ü–û–î–ê–õ', 'SUBMITTED'],
    'ContactInformation': ['–ö–û–ù–¢–ê–ö–¢', '–¢–ï–õ–ï–§–û–ù', 'EMAIL', 'PHONE']
}

# –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–∞–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
TEMPLATE_FIELD_MAP = {
    '–ò–º—è (—Ä—É—Å)': 'FullNameRU',
    '–ò–º—è (–∞–Ω–≥–ª)': 'FullNameEN',
    '–ü–æ–ª': 'Gender',
    '–†–∞–∑–º–µ—Ä': 'Size',
    '–¶–µ—Ä–∫–æ–≤—å': 'Church',
    '–†–æ–ª—å': 'Role',
    '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': 'Department',
    '–ì–æ—Ä–æ–¥': 'CountryAndCity',
    '–ö—Ç–æ –ø–æ–¥–∞–ª': 'SubmittedBy',
    '–ö–æ–Ω—Ç–∞–∫—Ç—ã': 'ContactInformation',
}


def is_template_format(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω."""
    count = 0
    for field in TEMPLATE_FIELD_MAP.keys():
        if re.search(fr'{re.escape(field)}\s*:', text, re.IGNORECASE):
            count += 1
    return count >= 3


def parse_template_format(text: str) -> Dict:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ —à–∞–±–ª–æ–Ω—É –ö–ª—é—á: –ó–Ω–∞—á–µ–Ω–∏–µ."""
    data: Dict = {}
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    parts = re.split(r'[\n;]+', text)
    items = []
    for part in parts:
        items.extend(part.split(','))
    for item in items:
        if ':' not in item:
            continue
        key, value = item.split(':', 1)
        key = key.strip()
        value = value.strip()
        if not value:
            continue
        for ru, eng in TEMPLATE_FIELD_MAP.items():
            if key.lower() == ru.lower():
                data[eng] = value
                break
    return data


def contains_hebrew(text: str) -> bool:
    return any('\u0590' <= char <= '\u05FF' for char in text)


def contains_emoji(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏"""
    return any(
        '\U0001F600' <= char <= '\U0001F64F' or  # Emoticons
        '\U0001F300' <= char <= '\U0001F5FF' or  # Misc Symbols
        '\U0001F680' <= char <= '\U0001F6FF' or  # Transport & Map
        '\U0001F1E0' <= char <= '\U0001F1FF' or  # Regional
        '\U00002600' <= char <= '\U000027BF' or  # Misc
        '\U0001F900' <= char <= '\U0001F9FF'
        for char in text
    )


def clean_text_from_confirmation_block(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    cleaned = ''.join(ch for ch in text if not contains_emoji(ch))
    cleaned = cleaned.replace('**', '').replace('*', '')
    cleaned = cleaned.replace('üîç', '').replace('‚Ä¢', '')

    field_labels = [
        '–ò–º—è (—Ä—É—Å)', '–ò–º—è (–∞–Ω–≥–ª)', '–ü–æ–ª', '–†–∞–∑–º–µ—Ä', '–¶–µ—Ä–∫–æ–≤—å',
        '–†–æ–ª—å', '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç', '–ì–æ—Ä–æ–¥', '–ö—Ç–æ –ø–æ–¥–∞–ª', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
    ]

    for label in field_labels:
        cleaned = re.sub(fr'{label}\s*:', '', cleaned, flags=re.IGNORECASE)

    cleaned = cleaned.replace(':', '')

    words = cleaned.split()
    filtered = []
    for word in words:
        w = word.strip('.,!?:;').upper()
        if (
            w not in CONFIRMATION_NOISE_WORDS and
            not w.startswith('‚ûñ') and
            not w.startswith('‚ùå') and
            len(w) > 0
        ):
            filtered.append(word)

    return ' '.join(filtered)


def detect_field_update_intent(text: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    text_upper = text.upper()
    words = re.split(r'\s+', text_upper)

    for field, indicators in FIELD_INDICATORS.items():
        for ind in indicators:
            if ind in words:
                return field

    if any(word in GENDER_KEYWORDS['F'] + GENDER_KEYWORDS['M'] for word in words):
        return 'Gender'

    if any(word in SIZES for word in words):
        return 'Size'

    return None


def parse_field_update(text: str, field_hint: str) -> Dict:
    """–ü–∞—Ä—Å–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    text_clean = clean_text_from_confirmation_block(text)
    words = text_clean.split()
    update: Dict = {}

    if field_hint == 'Gender':
        for word in words:
            wu = word.upper()
            if wu in GENDER_KEYWORDS['F']:
                update['Gender'] = 'F'
                break
            if wu in GENDER_KEYWORDS['M']:
                update['Gender'] = 'M'
                break

    elif field_hint == 'Size':
        for word in words:
            wu = word.upper()
            if wu in SIZES:
                if wu == 'MEDIUM':
                    update['Size'] = 'M'
                elif wu == 'LARGE':
                    update['Size'] = 'L'
                elif wu == 'SMALL':
                    update['Size'] = 'S'
                else:
                    update['Size'] = wu
                break

    elif field_hint == 'Role':
        for word in words:
            wu = word.upper()
            if wu in ROLE_KEYWORDS['TEAM']:
                update['Role'] = 'TEAM'
                break
            if wu in ROLE_KEYWORDS['CANDIDATE']:
                update['Role'] = 'CANDIDATE'
                break

    elif field_hint == 'Department':
        for dept, keys in DEPARTMENT_KEYWORDS.items():
            for word in words:
                if word.upper() in keys:
                    update['Department'] = dept
                    break
            if 'Department' in update:
                break

    elif field_hint == 'Church':
        church_words = []
        for word in words:
            if not any(kw in word.upper() for kw in CHURCH_KEYWORDS) and not contains_hebrew(word):
                church_words.append(word)
        if church_words:
            update['Church'] = ' '.join(church_words)

    elif field_hint == 'CountryAndCity':
        for word in words:
            if word.upper() in ISRAEL_CITIES:
                update['CountryAndCity'] = word
                break

    return update


def _extract_submitted_by(text: str, processed_words: set, data: Dict):
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–æ—Ç –ò–º—è –§–∞–º–∏–ª–∏—è", –Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
    match = re.search(r'–æ—Ç\s+([–ê-–Ø–ÅA-Z][–ê-–Ø–∞-—è—ëA-Za-z\s]+)', text, re.IGNORECASE)
    if match:
        full_match = match.group(1).strip()
        words = full_match.split()
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        valid_words = []
        for word in words:
            if word not in processed_words:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ä–∞–∑–º–µ—Ä–∞/—Ä–æ–ª–∏/–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
                word_upper = word.upper()
                if (word_upper not in SIZES and 
                    word_upper not in [k for keys in ROLE_KEYWORDS.values() for k in keys] and
                    word_upper not in [k for keys in DEPARTMENT_KEYWORDS.values() for k in keys]):
                    valid_words.append(word)
                else:
                    break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –∫–ª—é—á–µ–≤–æ–º —Å–ª–æ–≤–µ
        
        if valid_words:
            data['SubmittedBy'] = ' '.join(valid_words)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ processed_words —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª–æ–≤–∞
            for word in valid_words:
                processed_words.add(word)
            processed_words.add('–æ—Ç')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–≥


def _extract_contacts(all_words: list, processed_words: set, data: Dict):
    for word in all_words:
        if word in processed_words:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        if '@' in word and '.' in word.split('@')[-1]:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å @ –∏ —Ç–æ—á–∫–∞ –ø–æ—Å–ª–µ @
            if len(word) >= 5:  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ email
                data['ContactInformation'] = word
                processed_words.add(word)
                break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –û—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ—Ö –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ +
        cleaned_phone = ''.join(c for c in word if c.isdigit() or c == '+')

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
        digit_count = sum(1 for c in cleaned_phone if c.isdigit())

        # –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä
        if digit_count >= 7:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
            if (
                word.startswith(('+', '8', '7')) or
                digit_count >= 10 or  # –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                (digit_count >= 7 and any(char in word for char in ['-', '(', ')', ' ']))
            ):
                data['ContactInformation'] = word
                processed_words.add(word)
                break


def _extract_simple_fields(all_words: list, processed_words: set, data: Dict):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    gender_explicit = False

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª
    for word in all_words:
        if word in processed_words:
            continue
        wu = word.upper()

        if wu in GENDER_KEYWORDS['F']:
            data['Gender'] = 'F'
            gender_explicit = True
            processed_words.add(word)
            break

    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞
    for idx, word in enumerate(all_words):
        if word in processed_words:
            continue
        wu = word.upper()

        if wu in GENDER_KEYWORDS['M'] and not gender_explicit:
            if wu == 'M' and not data.get('Size'):
                ctx = []
                if idx > 0:
                    ctx.append(all_words[idx - 1].upper())
                if idx < len(all_words) - 1:
                    ctx.append(all_words[idx + 1].upper())

                if any('–†–ê–ó–ú–ï–†' in c or 'SIZE' in c for c in ctx):
                    data['Size'] = 'M'
                else:
                    data['Gender'] = 'M'
            else:
                data['Gender'] = 'M'
            processed_words.add(word)
            continue

        if wu in SIZES:
            if wu == 'MEDIUM':
                data['Size'] = 'M'
            elif wu == 'LARGE':
                data['Size'] = 'L'
            elif wu == 'SMALL':
                data['Size'] = 'S'
            else:
                data['Size'] = wu
            processed_words.add(word)

        elif any(keyword == wu for keyword in ROLE_KEYWORDS['TEAM']):
            data['Role'] = 'TEAM'
            processed_words.add(word)
        elif any(keyword == wu for keyword in ROLE_KEYWORDS['CANDIDATE']):
            data['Role'] = 'CANDIDATE'
            processed_words.add(word)
        elif not contains_hebrew(word):
            dept_found = False
            for dept, keywords in DEPARTMENT_KEYWORDS.items():
                if any(keyword == wu for keyword in keywords):
                    data['Department'] = dept
                    processed_words.add(word)
                    dept_found = True
                    break

            if not dept_found and wu in ISRAEL_CITIES:
                data['CountryAndCity'] = word
                processed_words.add(word)


def _extract_church(all_words: list, processed_words: set, data: Dict):
    for i, word in enumerate(all_words):
        if word in processed_words:
            continue
        word_upper = word.upper()
        if any(keyword in word_upper for keyword in CHURCH_KEYWORDS):
            church_words = []
            if (i > 0 and all_words[i-1] not in processed_words and not contains_hebrew(all_words[i-1])):
                church_words.append(all_words[i-1])
                processed_words.add(all_words[i-1])
            church_words.append(word)
            processed_words.add(word)
            if (i < len(all_words) - 1 and all_words[i+1] not in processed_words and not contains_hebrew(all_words[i+1])):
                church_words.append(all_words[i+1])
                processed_words.add(all_words[i+1])
            data['Church'] = ' '.join(church_words)
            break


def _extract_names(all_words: list, processed_words: set, data: Dict):
    unprocessed = [w for w in all_words if w not in processed_words]
    russian_words = []
    english_words = []
    for word in unprocessed:
        if word.isalpha() and all(ord(c) < 128 for c in word):
            english_words.append(word)
        else:
            russian_words.append(word)
    if russian_words:
        data['FullNameRU'] = ' '.join(russian_words[:2])
    if english_words:
        data['FullNameEN'] = ' '.join(english_words[:2])


def parse_participant_data(text: str, is_update: bool = False) -> Dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    text = text.strip()

    if is_template_format(text):
        return parse_template_format(text)

    if is_update:
        text = clean_text_from_confirmation_block(text)
        field_hint = detect_field_update_intent(text)
        if field_hint:
            return parse_field_update(text, field_hint)

    all_words = text.split()

    data = {
        'FullNameRU': '',
        'Gender': 'F',
        'Size': '',
        'Church': '',
        'Role': 'CANDIDATE',
        'Department': '',
        'FullNameEN': '',
        'SubmittedBy': '',
        'ContactInformation': '',
        'CountryAndCity': ''
    }

    processed_words: set = set()

    _extract_contacts(all_words, processed_words, data)
    _extract_simple_fields(all_words, processed_words, data)
    _extract_church(all_words, processed_words, data)
    _extract_submitted_by(text, processed_words, data)
    _extract_names(all_words, processed_words, data)

    return data
