from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import COORDINATOR_IDS, VIEWER_IDS
from states import SEARCHING_PARTICIPANTS
from presentation.services.message_service import MessageService


class UIService:
    def __init__(self, message_service: MessageService):
        self.message_service = message_service

    def _get_user_role(self, user_id: int) -> str:
        if user_id in COORDINATOR_IDS:
            return "coordinator"
        if user_id in VIEWER_IDS:
            return "viewer"
        return "unauthorized"

    async def cleanup_messages(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
        messages_to_delete = context.user_data.get("messages_to_delete", [])
        for message_id in messages_to_delete:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                continue
        if "messages_to_delete" in context.user_data:
            context.user_data["messages_to_delete"].clear()

    def get_main_menu_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        if user_id in COORDINATOR_IDS:
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="main_add"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="main_search"),
                ],
                [
                    InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="main_list"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="main_export"),
                ],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="main_help")],
            ]
        else:
            keyboard = [
                [
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="main_search"),
                    InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="main_list"),
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="main_export"),
                    InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="main_help"),
                ],
            ]
        return InlineKeyboardMarkup(keyboard)

    async def show_main_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_return: bool = False
    ) -> None:
        user_id = update.effective_user.id
        role = self._get_user_role(user_id)
        if is_return:
            if context.user_data:
                context.user_data.clear()
            if hasattr(context, "chat_data") and context.chat_data:
                conversation_keys = [
                    k for k in list(context.chat_data.keys()) if "conversation" in str(k).lower()
                ]
                for key in conversation_keys:
                    context.chat_data.pop(key, None)

        if is_return:
            welcome_text = "‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.**\n\n–ß–µ–º –µ—â–µ –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        else:
            welcome_text = (
                "üèïÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Tres Dias Israel!**\n\n"
                f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: **{role.title()}**"
            )

        reply_markup = self.get_main_menu_keyboard(user_id)

        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=welcome_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup,
                )
            except Exception:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=welcome_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup,
                )
        else:
            await update.effective_message.reply_text(
                text=welcome_text, parse_mode="Markdown", reply_markup=reply_markup
            )

    async def show_search_prompt(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False
    ) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        cancel_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_cancel")]]
        )

        text = (
            "üîç **–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ **–ò–º—è** (—Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ)\n"
            "‚Ä¢ **ID —É—á–∞—Å—Ç–Ω–∏–∫–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123)\n"
            "‚Ä¢ **–ß–∞—Å—Ç—å –∏–º–µ–Ω–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω)\n\n"
            "üí° *–ü–æ–∏—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ*"
        )

        if is_callback:
            await update.callback_query.answer()
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
            msg = await update.callback_query.message.reply_text(
                text, parse_mode="Markdown", reply_markup=cancel_markup
            )
            self.message_service.add_message_to_cleanup(
                context, update.callback_query.message.message_id
            )
        else:
            msg = await update.message.reply_text(
                text, parse_mode="Markdown", reply_markup=cancel_markup
            )
            self.message_service.add_message_to_cleanup(
                context, update.message.message_id
            )

        self.message_service.add_message_to_cleanup(context, msg.message_id)
        context.user_data["current_state"] = SEARCHING_PARTICIPANTS
        return SEARCHING_PARTICIPANTS
